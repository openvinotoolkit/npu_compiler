//
// Copyright (C) 2022 Intel Corporation
// SPDX-License-Identifier: Apache 2.0
//

// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"

int main()
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    mv::CompilationUnit unit("Big_kernel");
    mv::OpModel& model = unit.model();
    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);
    unit.loadTargetDescriptor(mv::Target::ma2490);

    const auto data_0 = model.input("data", {64, 64, 16, 1}, mv::DType("UInt8"), mv::Order("NHWC"));
    data_0->setQuantParams({{0},{0.00196078431372549},{-inf},{inf},{0},{1}});
    // Load weights (u8 saved as int64)
    std::string weights_filename(mv::utils::projectRootPath() + "/tests/layer/conv_big_kernel/conv_big_kernel_13.w");
    // std::string weights_filename(mv::utils::projectRootPath() + "/tests/layer/conv_big_kernel/conv_big_kernel_15.w");
    std::vector<int64_t> weightsData = mv::utils::readWeightsFromFile<int64_t>(weights_filename);

    auto weights0 = model.constantInt("", weightsData, {13,13,16,16}, mv::DType("UInt8"), mv::Order("NCHW"));
    // auto weights0 = model.constantInt("", weightsData,{15,15,16,16}, mv::DType("UInt8"), mv::Order("NCHW"));
    auto conv0 = model.conv("conv", data_0, weights0, {1, 1}, {0, 0, 0, 0}, 1, 1);
    weights0->setQuantParams({{0},{0.00392156862745098},{},{}});
    conv0->setQuantParams({{0},{0.00196078431372549},{-inf},{inf},{0},{1}});

    model.output("", conv0, mv::DType("Float16"));
    unit.initialize();
    unit.run();
}
