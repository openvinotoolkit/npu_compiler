//This file is the parsed network which is created through python.

// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"
#include "multiple_output_different_sizes.data.inc"

void build_pySwigCU(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_6_0 = model.input("input", {64, 64, 3, 1}, mv::DType("UInt8"), mv::Order("NHWC"));
    const auto conv1_0_weights_1_0 = model.constantInt("conv1_weights", conv1_0_weights_1_0_data, {3, 3, 3, 32}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv1_7_0 = model.conv("conv1", input_6_0, conv1_0_weights_1_0, {2, 2}, {0, 0, 0, 0}, 1, 1);
    const auto conv1_0_bias_2weights_0 = model.constantInt("conv1_bias_weights", conv1_0_bias_2weights_0_data, {32}, mv::DType("UInt8"), mv::Order("W"));
    const auto conv1_0_bias_2_0 = model.bias("conv1_bias", conv1_7_0, conv1_0_bias_2weights_0);

    // Parallel branch 1
    const auto conv1_1_conv1_3_weights_4_0 = model.constantInt("conv2a_weights", conv1_1_conv1_3_weights_4_0_data, {3, 3, 32, 16}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv1_1_conv1_8_0 = model.conv("conv2a", conv1_0_bias_2_0, conv1_1_conv1_3_weights_4_0,{2, 2}, {0, 0, 0, 0}, 1, 1);
    const auto conv1_1_conv1_3_bias_5weights_0 = model.constantInt("conv2a_bias_weights", conv1_1_conv1_3_bias_5weights_0_data, {16}, mv::DType("UInt8"), mv::Order("W"));
    const auto conv1_1_conv1_3_bias_5_0 = model.bias("conv2a_bias", conv1_1_conv1_8_0, conv1_1_conv1_3_bias_5weights_0);

    // Parallel branch 2 with different size
    const auto conv1_1_conv1_3_weights_4_1 = model.constantInt("conv2b_weights", conv1_1_conv1_3_weights_4_1_data, {5, 5, 32, 16}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv1_1_conv1_8_1 = model.conv("conv2b", conv1_0_bias_2_0, conv1_1_conv1_3_weights_4_1, {2, 2}, {0, 0, 0, 0}, 1, 1);
    const auto conv1_1_conv1_3_bias_5weights_1 = model.constantInt("conv2b_bias_weights", conv1_1_conv1_3_bias_5weights_1_data, {16}, mv::DType("UInt8"), mv::Order("W"));
    const auto conv1_1_conv1_3_bias_5_1 = model.bias("conv2b_bias", conv1_1_conv1_8_1, conv1_1_conv1_3_bias_5weights_1);

    const auto output1 = model.output("", conv1_1_conv1_3_bias_5_0, mv::DType("Default"), true);
    const auto output2 = model.output("", conv1_1_conv1_3_bias_5_1, mv::DType("Default"), true);

    input_6_0->setQuantParams({{128},{0.007843137718737},{-1.000000000000000},{1.000000000000000},{0},{1}});
    conv1_0_weights_1_0->setQuantParams({{105},{0.002647720742971},{-0.279308497905731},{0.395860284566879},{0},{1}});
    conv1_7_0->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv1_0_bias_2weights_0->setQuantParams({{0},{0.000020766436137},{-inf},{inf},{0},{1}});
    conv1_0_bias_2_0->setQuantParams({{0},{0.000020766436137},{-inf},{inf},{0},{1}});
    conv1_1_conv1_3_weights_4_0->setQuantParams({{119},{0.002745436970145},{-0.326061517000198},{0.374024897813797},{0},{1}});
    conv1_1_conv1_8_0->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv1_1_conv1_3_bias_5weights_0->setQuantParams({{0},{0.000010766419109},{-inf},{inf},{0},{1}});
    conv1_1_conv1_3_bias_5_0->setQuantParams({{0},{0.000010766419109},{-inf},{inf},{0},{1}});
    conv1_1_conv1_3_weights_4_1->setQuantParams({{121},{0.003013054607436},{-0.365644007921219},{0.402684897184372},{0},{1}});
    conv1_1_conv1_8_1->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv1_1_conv1_3_bias_5weights_1->setQuantParams({{0},{0.000011815900507},{-inf},{inf},{0},{1}});
    conv1_1_conv1_3_bias_5_1->setQuantParams({{0},{0.000011815900507},{-inf},{inf},{0},{1}});
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_pySwigCU(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);
    //Disabling CM Conv for the test
    unit.compilationDescriptor().setPassArg("GlobalConfigParams", "enable_channel_major_conv", mv::Attribute(bool(false)));

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}
