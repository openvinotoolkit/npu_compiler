//This file is the parsed network which is created through python.

// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"
#include "multiple_output_same_size.data.inc"

void build_pySwigCU(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_6_0 = model.input({64, 64, 3, 1}, mv::DType("UInt8"), mv::Order("NHWC"), {{128},{0.007843137718737},{-1.000000000000000},{1.000000000000000},{0},{1}}, "input#6");
    const auto conv_0_weights_1_0 = model.constantInt(conv_0_weights_1_0_data, {3, 3, 3, 64}, mv::DType("UInt8"), mv::Order("NCHW"), {{128},{0.002404872793704},{-0.307943463325500},{0.305299073457718},{0},{1}}, "conv#0_weights#1");
    const auto conv_7_0 = model.conv(input_6_0, conv_0_weights_1_0, {1, 1}, {1, 1, 1, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "conv#7");
    const auto conv_0_bias_2weights_0 = model.constantInt(conv_0_bias_2weights_0_data, {64}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000018861746867},{-inf},{inf},{0},{1}}, "conv#0_bias#2weights");
    const auto conv_0_bias_2_0 = model.bias(conv_7_0, conv_0_bias_2weights_0, mv::DType("UInt8"), {{0},{0.000018861746867},{-inf},{inf},{0},{1}}, "conv#0_bias#2");

    const auto output_3_weights_4_0 = model.constantInt(output_3_weights_4_0_data, {3, 3, 64, 128}, mv::DType("UInt8"), mv::Order("NCHW"), {{131},{0.003203542437404},{-0.420824050903320},{0.396079272031784},{0},{1}}, "output#3_weights#4");
    const auto output_8_0 = model.conv(conv_0_bias_2_0, output_3_weights_4_0, {1, 1}, {1, 1, 1, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "output#8");
    const auto output_3_bias_5weights_0 = model.constantInt(output_3_bias_5weights_0_data, {128}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5weights");
    const auto output_3_bias_5_0 = model.bias(output_8_0, output_3_bias_5weights_0, mv::DType("UInt8"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5");
    const auto output = model.output(output_3_bias_5_0, mv::DType("Default"), {{},{},{},{}}, true, "Out1");
    //parallel branch
    const auto output_3_weights_4_0_1 = model.constantInt(output_3_weights_4_0_data, {3, 3, 64, 128}, mv::DType("UInt8"), mv::Order("NCHW"), {{131},{0.003203542437404},{-0.420824050903320},{0.396079272031784},{0},{1}}, "output#3_weights#4_1");
    const auto output_8_0_1 = model.conv(conv_0_bias_2_0, output_3_weights_4_0_1, {1, 1}, {1, 1, 1, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "output#8_1");
    const auto output_3_bias_5weights_0_1 = model.constantInt(output_3_bias_5weights_0_data, {128}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5weights_1");
    const auto output_3_bias_5_0_1 = model.bias(output_8_0_1, output_3_bias_5weights_0_1, mv::DType("UInt8"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5_1");
    const auto output1 = model.output(output_3_bias_5_0_1, mv::DType("Default"), {{},{},{},{}}, true, "Out2");
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_pySwigCU(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);
    //Disabling CM Conv for the test
    unit.compilationDescriptor().setPassArg("GlobalConfigParams", "enable_channel_major_conv", mv::Attribute(bool(false)));

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}
