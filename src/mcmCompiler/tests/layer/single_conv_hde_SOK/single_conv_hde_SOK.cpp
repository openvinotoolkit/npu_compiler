// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"
#include "single_conv_hde_SOK.data.inc"

void build_pySwigCU(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_3_0 = model.input("input#3", {112, 112, 3, 1},  mv::DType("UInt8"), mv::Order::getZMajorID(4));
    const auto conv1_conv1_0_weights_1_0 = model.constantInt("conv1/conv1#0_weights#1", conv1_conv1_0_weights_1_0_data, {7, 7, 3, 64}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv1_conv1_4_0 = model.conv("conv1/conv1#4", input_3_0, conv1_conv1_0_weights_1_0, {2, 2}, {2, 3, 2, 3}, 1, 1);
    const auto conv1_conv1_0_bias_2weights_0 = model.constantInt("conv1/conv1#0_bias#2", conv1_conv1_0_bias_2weights_0_data, {64}, mv::DType("UInt8"), mv::Order::getColMajorID(1));
    const auto conv1_conv1_0_bias_2_0 = model.bias("", conv1_conv1_4_0, conv1_conv1_0_bias_2weights_0);
    const auto output = model.output("", conv1_conv1_0_bias_2_0, mv::DType("Default"));

    input_3_0->setQuantParams({{128},{0.007843137718737125},{-1.0},{1.0}});
    conv1_conv1_0_weights_1_0->setQuantParams({{115},{0.002871257718652487},{-0.32948583364486694},{0.40268489718437195}});
    conv1_conv1_4_0->setQuantParams({{0},{0.003921568859368563},{0.0},{1.0}});
    conv1_conv1_0_bias_2weights_0->setQuantParams({{0},{2.2519669073517434e-05},{-inf},{inf}});
    conv1_conv1_0_bias_2_0->setQuantParams({{0},{0.003921568859368563},{0.0},{1.0}});
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_pySwigCU(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);
    //Disabling CM Conv for the test
    unit.compilationDescriptor().setPassArg("GlobalConfigParams", "enable_channel_major_conv", mv::Attribute(bool(false)));

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}

