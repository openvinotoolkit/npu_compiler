
// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"
#include "eltwise_sparsity_clustering_test_1.data.inc"

void build_pySwigCU(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_10_0 = model.input("input#10", {32, 32, 16, 1}, mv::DType("UInt8"), mv::Order("NHWC"));
    const auto conv1a_0_weights_1_0 = model.constantInt("conv1a#0_weights#1", conv1a_0_weights_1_0_data, {3, 3, 16, 32}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv1a_11_0 = model.conv("conv1a#11", input_10_0, conv1a_0_weights_1_0, {1, 1}, {1, 1, 1, 1}, 1, 1);
    const auto conv1a_0_bias_2weights_0 = model.constantInt("conv1a#0_bias#2weights", conv1a_0_bias_2weights_0_data, {32}, mv::DType("UInt8"), mv::Order("W"));
    const auto conv1a_0_bias_2_0 = model.bias("conv1a#0_bias#2", conv1a_11_0, conv1a_0_bias_2weights_0);
    const auto conv1b_3_weights_4_0 = model.constantInt("conv1b#3_weights#4", conv1b_3_weights_4_0_data, {3, 3, 16, 32}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv1b_12_0 = model.conv("conv1b#12", input_10_0, conv1b_3_weights_4_0, {1, 1}, {1, 1, 1, 1}, 1, 1);
    const auto conv1b_3_bias_5weights_0 = model.constantInt("conv1b#3_bias#5weights", conv1b_3_bias_5weights_0_data, {32}, mv::DType("UInt8"), mv::Order("W"));
    const auto conv1b_3_bias_5_0 = model.bias("conv1b#3_bias#5", conv1b_12_0, conv1b_3_bias_5weights_0);
    const auto eltwise_Relu_13_0 = model.eltwise("eltwise/Relu#13", {conv1a_0_bias_2_0, conv1b_3_bias_5_0}, "Add");
    const auto conv2_conv2_7_weights_8_0 = model.constantInt("conv2/conv2#7_weights#8", conv2_conv2_7_weights_8_0_data, {1, 1, 32, 16}, mv::DType("UInt8"), mv::Order("NCHW"));
    const auto conv2_conv2_14_0 = model.conv("conv2/conv2#14", eltwise_Relu_13_0, conv2_conv2_7_weights_8_0, {1, 1}, {0, 0, 0, 0}, 1, 1);
    const auto conv2_conv2_7_bias_9weights_0 = model.constantInt("conv2/conv2#7_bias#9weights", conv2_conv2_7_bias_9weights_0_data, {16}, mv::DType("UInt8"), mv::Order("W"));
    const auto conv2_conv2_7_bias_9_0 = model.bias("conv2/conv2#7_bias#9", conv2_conv2_14_0, conv2_conv2_7_bias_9weights_0);
    const auto output = model.output("", conv2_conv2_7_bias_9_0, mv::DType("Default"));

    input_10_0->setQuantParams({{128},{0.007843137718737},{-1.000000000000000},{1.000000000000000},{0},{1}});
    conv1a_0_weights_1_0->setQuantParams({{115},{0.002828093012795},{-0.325303435325623},{0.395860284566879},{0},{1}});
    conv1a_11_0->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv1a_0_bias_2weights_0->setQuantParams({{0},{0.000022181122404},{-inf},{inf},{0},{1}});
    conv1a_0_bias_2_0->setQuantParams({{0},{0.000022181122404},{-inf},{inf},{0},{1}});
    conv1b_3_weights_4_0->setQuantParams({{128},{0.002850869437680},{-0.365644007921219},{0.361327707767487},{0},{1}});
    conv1b_12_0->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv1b_3_bias_5weights_0->setQuantParams({{0},{0.000022359759896},{-inf},{inf},{0},{1}});
    conv1b_3_bias_5_0->setQuantParams({{0},{0.000022359759896},{-inf},{inf},{0},{1}});
    eltwise_Relu_13_0->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv2_conv2_7_weights_8_0->setQuantParams({{122},{0.002428876934573},{-0.296570003032684},{0.322793602943420},{0},{1}});
    conv2_conv2_14_0->setQuantParams({{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}});
    conv2_conv2_7_bias_9weights_0->setQuantParams({{0},{0.000009525007044},{-inf},{inf},{0},{1}});
    conv2_conv2_7_bias_9_0->setQuantParams({{0},{0.000009525007044},{-inf},{inf},{0},{1}});
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_pySwigCU(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}
