{
    "initialize": {
        "Singular": [
            {
                "name" : "GlobalConfigParams",
                "_comment" : "Stores common params accross multiple passes. Access through the Computation Model.",
                "verbose": "Error",
                "barrier_index_assignment" : "Dynamic",
                "default_tensor_placement" : "NNCMX"
            },
            "AssignInputNode",
            "AssignOutputNode",
            "ComputeMemory",
            "AssignUniqueOpId",
            {
                "name": "ApplyTargetVars",
                "Vars": [
                    {
                        "name": "dmaControllers",
                        "block": "nce",
                        "var": "DMAControllers",
                        "default": 1
                    },
                    {
                        "name": "csramLimit",
                        "block": "nce",
                        "var": "CSRAM",
                        "default": 0
                    }
                ]
            },
            {
                "name": "CreateSourceStructure",
                "VersionMajor": 3,
                "VersionMinor": 11,
                "VersionPatch": 0,
                "VersionHash": "9aa43159420c77d8cf765393954ac2fbb372ab02"
            },
            "UseReferenceOps",
	    "CollapseBranchedScale"
        ]
    },
    "quantization" : {
        "Singular" : [
            "ResolveFQAfterBranchingSlices",
            "FakeQuantize"
        ]
    },
    "adapt": {
        "Singular": [
            "RemoveOps",
            "ReplacementOps",
            "TensorsToU8",
            "TensorsToFP16",
            "FusePostOps",
            "PreprocessForPWL",
            "CheckPWLForRequantize",
            "ConvDilationUsingStorageElement",
            "HandleGroupConvolution",
            "StreamBinaryDataWeights",
            "DecideOutputDataType",
            "PlaceNeutralMaxPoolBefore",
            "PlacementOfOps",
            "PostTrainingQuantize",
            "EltwiseToSWEltwise",
            "MarkEltWiseUpaInputs",
            "MarkCMCompatibleConvs",
            "AddPermuteToNonCMConvPaths",
            {
                "name" : "GraphParameterOptimization",
                "graphOptimizerConfig" : {
                    "globalConfigs" : [
                        {"name" : "createStrategyDots", "value" : false},
                        {"name" : "dotFileLocation", "value" : "./output/dots/strategy/"},
                        {"name" : "jsonOutFileName", "value" : "./output/mcmCompiler_strategy_output.json"}
                    ],
                    "globalStrategies" : [
                        {"name" : "forceSpilling",    "value" : false       },
                        {"name" : "enableStreaming",   "value" : true       },
                        {"name" : "enablePipelining",   "value" : false },
                        {"name" : "enablePrefetching",   "value" : true      },
                        {"name" : "forceActivationSparsity",    "value" : false      },
                        {"name" : "enableWeightsSparsity",    "value" : false      },
                        {"name" : "clusteringStrategy","value" : "Automatic"}
                    ],
                    "layerStrategies" : [
                        {
                            "name" : "Conv",
                            "strategies": [
                                {"name" : "streamingStrategies",  "value" : ["StreamOverH","StreamOverK","StreamOverN"]},
                                {"name" : "clusteringStrategies", "value" : ["SplitOverH","SplitOverK", "Clustering"]},
                                {"name" : "inputActivationSparsity",             "value" : true},
                                {"name" : "outputActivationSparsity",             "value" : true},
                                {"name" : "weightsSparsity",                      "value" : true},
                                {"name" : "pipelining",                           "value" : true}
                            ]
                        },
                        {
                            "name" : "DepthwiseConv",
                            "strategies": [

                                {"name" : "streamingStrategies",  "value" : ["StreamOverH","StreamOverC"]},
                                {"name" : "clusteringStrategies", "value" : ["SplitOverH","SplitOverK","Clustering"]},
                                {"name" : "inputActivationSparsity",             "value" : false},
                                {"name" : "outputActivationSparsity",             "value" : true},
                                {"name" : "weightsSparsity",                      "value" : false},
                                {"name" : "pipelining",                           "value" : false}
                            ]
                        },
                        {
                            "name" : "MaxPool",
                            "strategies": [
                                {"name" : "streamingStrategies",  "value" : ["StreamOverH"]},
                                {"name" : "clusteringStrategies", "value" : ["SplitOverH","HKSwitch","Clustering"]},
                                {"name" : "inputActivationSparsity",             "value" : false},
                                {"name" : "outputActivationSparsity",             "value" : true},
                                {"name" : "weightsSparsity",                      "value" : false},
                                {"name" : "pipelining",                           "value" : false}
                            ]
                        },
                        {
                            "name" : "Concat",
                            "strategies": [
                                {"name" : "clusteringStrategies", "value" : ["SplitOverH","SplitOverK"]},
                                {"name" : "inputActivationSparsity",             "value" : false},
                                {"name" : "outputActivationSparsity",             "value" : true},
                                {"name" : "weightsSparsity",                      "value" : false},
                                {"name" : "pipelining",                           "value" : false}
                            ]
                        },
                        {
                            "name" : "Eltwise",
                            "strategies": [
                                {"name" : "streamingStrategies",  "value" : ["StreamOverH"]},
                                {"name" : "clusteringStrategies", "value" : ["SplitOverH","HKSwitch","Clustering"]},
                                {"name" : "inputActivationSparsity",             "value" : true},
                                {"name" : "outputActivationSparsity",             "value" : true},
                                {"name" : "weightsSparsity",                      "value" : false},
                                {"name" : "pipelining",                           "value" : false}
                            ]
                        }
                    ]
                }
            },
            "StoreGraphOptimizerDecisions",
            "AddActivationStreaming",
            "ComputeSparsitySolution",
            "StreamingOperations",
            "StreamBinaryDataWeights",
            "StreamCopyOperations"
        ]
    },
  "dma": {
        "Singular" : [
            "SetDpuTasksMemoryLocation",
            "SetUPATasksMemoryLocation",
            "UpdateImplicitLayersLocation",
            "ResolveImplicitOperations",
            "AddDPUTasksWeightsDMATasks",
            "AddUPATasksExtraInputsDMATasks",
            "EnsureSplitStrategiesForSpilling"
        ]
    },
    "control_flows":{
        "Singular" : [
            "TaskControlFlows",
            "NNCMX2DDRControlFlows"
        ]
    },
    "scheduling": {
        "Singular": [
            {
              "name" : "BarrierSchedulerPass",
              "real_physical_barriers": 32,
              "barrier_bound": 16,
              "producer_bound" : 256,
              "remove_barriers_in_upa_tail" : true,
              "remove_redundant_wait_barriers" : true
            },
            "LayoutDMA"
        ]
    },
    "validate": {
        "Singular": [
            "CheckTensors"
        ]
    },
    "serialize": {
        "Singular": [
            "RemoveRedundantUpdateBarriers",
            "DMAOrdering",
            "BuildGraphFileKmb",
            {
                "name": "GenerateBlobKmb",
                "output": "output/mcm.blob"
            }
        ]
    },
    "root": {
        "Singular": [
            "config",
            "initialize",
            "quantization",
            "adapt",
            "kmb_adapt",
            "dma",
            "control_flows",
            "finalize",
            "scheduling",
            "serialize"
        ]
    }
}
