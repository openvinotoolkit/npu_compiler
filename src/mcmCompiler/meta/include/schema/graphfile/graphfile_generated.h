// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRAPHFILE_MVCNN_H_
#define FLATBUFFERS_GENERATED_GRAPHFILE_MVCNN_H_

#include "flatbuffers/flatbuffers.h"

#include "dma_generated.h"
#include "fileHeader_generated.h"
#include "memoryManagement_generated.h"
#include "nnController_generated.h"
#include "nnNCE2_generated.h"
#include "software_generated.h"
#include "structure_generated.h"
#include "upaNCE_generated.h"

namespace MVCNN {

struct GraphFile;
struct GraphFileBuilder;
struct GraphFileT;

struct TaskList;
struct TaskListBuilder;
struct TaskListT;

struct Task;
struct TaskBuilder;
struct TaskT;

enum SpecificTask {
  SpecificTask_NONE = 0,
  SpecificTask_MvTensorTask = 1,
  SpecificTask_UPADMATask = 2,
  SpecificTask_NNDMATask = 3,
  SpecificTask_NCE1Task = 4,
  SpecificTask_NCE2Task = 5,
  SpecificTask_NNTensorTask = 6,
  SpecificTask_ControllerTask = 7,
  SpecificTask_UPALayerTask = 8,
  SpecificTask_SNNLayerTask = 9,
  SpecificTask_MIN = SpecificTask_NONE,
  SpecificTask_MAX = SpecificTask_SNNLayerTask
};

inline const SpecificTask (&EnumValuesSpecificTask())[10] {
  static const SpecificTask values[] = {
    SpecificTask_NONE,
    SpecificTask_MvTensorTask,
    SpecificTask_UPADMATask,
    SpecificTask_NNDMATask,
    SpecificTask_NCE1Task,
    SpecificTask_NCE2Task,
    SpecificTask_NNTensorTask,
    SpecificTask_ControllerTask,
    SpecificTask_UPALayerTask,
    SpecificTask_SNNLayerTask
  };
  return values;
}

inline const char * const *EnumNamesSpecificTask() {
  static const char * const names[11] = {
    "NONE",
    "MvTensorTask",
    "UPADMATask",
    "NNDMATask",
    "NCE1Task",
    "NCE2Task",
    "NNTensorTask",
    "ControllerTask",
    "UPALayerTask",
    "SNNLayerTask",
    nullptr
  };
  return names;
}

inline const char *EnumNameSpecificTask(SpecificTask e) {
  if (flatbuffers::IsOutRange(e, SpecificTask_NONE, SpecificTask_SNNLayerTask)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSpecificTask()[index];
}

template<typename T> struct SpecificTaskTraits {
  static const SpecificTask enum_value = SpecificTask_NONE;
};

template<> struct SpecificTaskTraits<MVCNN::MvTensorTask> {
  static const SpecificTask enum_value = SpecificTask_MvTensorTask;
};

template<> struct SpecificTaskTraits<MVCNN::UPADMATask> {
  static const SpecificTask enum_value = SpecificTask_UPADMATask;
};

template<> struct SpecificTaskTraits<MVCNN::NNDMATask> {
  static const SpecificTask enum_value = SpecificTask_NNDMATask;
};

template<> struct SpecificTaskTraits<MVCNN::NCE1Task> {
  static const SpecificTask enum_value = SpecificTask_NCE1Task;
};

template<> struct SpecificTaskTraits<MVCNN::NCE2Task> {
  static const SpecificTask enum_value = SpecificTask_NCE2Task;
};

template<> struct SpecificTaskTraits<MVCNN::NNTensorTask> {
  static const SpecificTask enum_value = SpecificTask_NNTensorTask;
};

template<> struct SpecificTaskTraits<MVCNN::ControllerTask> {
  static const SpecificTask enum_value = SpecificTask_ControllerTask;
};

template<> struct SpecificTaskTraits<MVCNN::UPALayerTask> {
  static const SpecificTask enum_value = SpecificTask_UPALayerTask;
};

template<> struct SpecificTaskTraits<MVCNN::SNNLayerTask> {
  static const SpecificTask enum_value = SpecificTask_SNNLayerTask;
};

struct SpecificTaskUnion {
  SpecificTask type;
  void *value;

  SpecificTaskUnion() : type(SpecificTask_NONE), value(nullptr) {}
  SpecificTaskUnion(SpecificTaskUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(SpecificTask_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  SpecificTaskUnion(const SpecificTaskUnion &);
  SpecificTaskUnion &operator=(const SpecificTaskUnion &u)
    { SpecificTaskUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  SpecificTaskUnion &operator=(SpecificTaskUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~SpecificTaskUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    using RT = typename std::remove_reference<T>::type;
    Reset();
    type = SpecificTaskTraits<typename RT::TableType>::enum_value;
    if (type != SpecificTask_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, SpecificTask type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  MVCNN::MvTensorTaskT *AsMvTensorTask() {
    return type == SpecificTask_MvTensorTask ?
      reinterpret_cast<MVCNN::MvTensorTaskT *>(value) : nullptr;
  }
  const MVCNN::MvTensorTaskT *AsMvTensorTask() const {
    return type == SpecificTask_MvTensorTask ?
      reinterpret_cast<const MVCNN::MvTensorTaskT *>(value) : nullptr;
  }
  MVCNN::UPADMATaskT *AsUPADMATask() {
    return type == SpecificTask_UPADMATask ?
      reinterpret_cast<MVCNN::UPADMATaskT *>(value) : nullptr;
  }
  const MVCNN::UPADMATaskT *AsUPADMATask() const {
    return type == SpecificTask_UPADMATask ?
      reinterpret_cast<const MVCNN::UPADMATaskT *>(value) : nullptr;
  }
  MVCNN::NNDMATaskT *AsNNDMATask() {
    return type == SpecificTask_NNDMATask ?
      reinterpret_cast<MVCNN::NNDMATaskT *>(value) : nullptr;
  }
  const MVCNN::NNDMATaskT *AsNNDMATask() const {
    return type == SpecificTask_NNDMATask ?
      reinterpret_cast<const MVCNN::NNDMATaskT *>(value) : nullptr;
  }
  MVCNN::NCE1TaskT *AsNCE1Task() {
    return type == SpecificTask_NCE1Task ?
      reinterpret_cast<MVCNN::NCE1TaskT *>(value) : nullptr;
  }
  const MVCNN::NCE1TaskT *AsNCE1Task() const {
    return type == SpecificTask_NCE1Task ?
      reinterpret_cast<const MVCNN::NCE1TaskT *>(value) : nullptr;
  }
  MVCNN::NCE2TaskT *AsNCE2Task() {
    return type == SpecificTask_NCE2Task ?
      reinterpret_cast<MVCNN::NCE2TaskT *>(value) : nullptr;
  }
  const MVCNN::NCE2TaskT *AsNCE2Task() const {
    return type == SpecificTask_NCE2Task ?
      reinterpret_cast<const MVCNN::NCE2TaskT *>(value) : nullptr;
  }
  MVCNN::NNTensorTaskT *AsNNTensorTask() {
    return type == SpecificTask_NNTensorTask ?
      reinterpret_cast<MVCNN::NNTensorTaskT *>(value) : nullptr;
  }
  const MVCNN::NNTensorTaskT *AsNNTensorTask() const {
    return type == SpecificTask_NNTensorTask ?
      reinterpret_cast<const MVCNN::NNTensorTaskT *>(value) : nullptr;
  }
  MVCNN::ControllerTaskT *AsControllerTask() {
    return type == SpecificTask_ControllerTask ?
      reinterpret_cast<MVCNN::ControllerTaskT *>(value) : nullptr;
  }
  const MVCNN::ControllerTaskT *AsControllerTask() const {
    return type == SpecificTask_ControllerTask ?
      reinterpret_cast<const MVCNN::ControllerTaskT *>(value) : nullptr;
  }
  MVCNN::UPALayerTaskT *AsUPALayerTask() {
    return type == SpecificTask_UPALayerTask ?
      reinterpret_cast<MVCNN::UPALayerTaskT *>(value) : nullptr;
  }
  const MVCNN::UPALayerTaskT *AsUPALayerTask() const {
    return type == SpecificTask_UPALayerTask ?
      reinterpret_cast<const MVCNN::UPALayerTaskT *>(value) : nullptr;
  }
  MVCNN::SNNLayerTaskT *AsSNNLayerTask() {
    return type == SpecificTask_SNNLayerTask ?
      reinterpret_cast<MVCNN::SNNLayerTaskT *>(value) : nullptr;
  }
  const MVCNN::SNNLayerTaskT *AsSNNLayerTask() const {
    return type == SpecificTask_SNNLayerTask ?
      reinterpret_cast<const MVCNN::SNNLayerTaskT *>(value) : nullptr;
  }
};

bool VerifySpecificTask(flatbuffers::Verifier &verifier, const void *obj, SpecificTask type);
bool VerifySpecificTaskVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct GraphFileT : public flatbuffers::NativeTable {
  typedef GraphFile TableType;
  std::unique_ptr<MVCNN::SummaryHeaderT> header;
  std::vector<std::unique_ptr<MVCNN::TaskListT>> task_lists;
  std::vector<std::unique_ptr<MVCNN::BarrierT>> barrier_table;
  std::vector<std::unique_ptr<MVCNN::BinaryDataT>> binary_data;
  GraphFileT() {
  }
};

struct GraphFile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GraphFileT NativeTableType;
  typedef GraphFileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_TASK_LISTS = 6,
    VT_BARRIER_TABLE = 8,
    VT_BINARY_DATA = 10
  };
  /// Overview:
  ///    This is the "root" object of the file. Start here and traverse into different objects
  ///    while reading.
  ///
  ///
  const MVCNN::SummaryHeader *header() const {
    return GetPointer<const MVCNN::SummaryHeader *>(VT_HEADER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MVCNN::TaskList>> *task_lists() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MVCNN::TaskList>> *>(VT_TASK_LISTS);
  }
  /// A list of barriers to be consumed by the device for its own scheduling.
  /// If you are manually scheduling barriers with leon tasks, you do not need to
  /// populate this field.
  const flatbuffers::Vector<flatbuffers::Offset<MVCNN::Barrier>> *barrier_table() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MVCNN::Barrier>> *>(VT_BARRIER_TABLE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MVCNN::BinaryData>> *binary_data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MVCNN::BinaryData>> *>(VT_BINARY_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_TASK_LISTS) &&
           verifier.VerifyVector(task_lists()) &&
           verifier.VerifyVectorOfTables(task_lists()) &&
           VerifyOffset(verifier, VT_BARRIER_TABLE) &&
           verifier.VerifyVector(barrier_table()) &&
           verifier.VerifyVectorOfTables(barrier_table()) &&
           VerifyOffset(verifier, VT_BINARY_DATA) &&
           verifier.VerifyVector(binary_data()) &&
           verifier.VerifyVectorOfTables(binary_data()) &&
           verifier.EndTable();
  }
  GraphFileT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GraphFileT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GraphFile> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GraphFileT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GraphFileBuilder {
  typedef GraphFile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<MVCNN::SummaryHeader> header) {
    fbb_.AddOffset(GraphFile::VT_HEADER, header);
  }
  void add_task_lists(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::TaskList>>> task_lists) {
    fbb_.AddOffset(GraphFile::VT_TASK_LISTS, task_lists);
  }
  void add_barrier_table(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::Barrier>>> barrier_table) {
    fbb_.AddOffset(GraphFile::VT_BARRIER_TABLE, barrier_table);
  }
  void add_binary_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::BinaryData>>> binary_data) {
    fbb_.AddOffset(GraphFile::VT_BINARY_DATA, binary_data);
  }
  explicit GraphFileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GraphFileBuilder &operator=(const GraphFileBuilder &);
  flatbuffers::Offset<GraphFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GraphFile>(end);
    return o;
  }
};

inline flatbuffers::Offset<GraphFile> CreateGraphFile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<MVCNN::SummaryHeader> header = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::TaskList>>> task_lists = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::Barrier>>> barrier_table = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::BinaryData>>> binary_data = 0) {
  GraphFileBuilder builder_(_fbb);
  builder_.add_binary_data(binary_data);
  builder_.add_barrier_table(barrier_table);
  builder_.add_task_lists(task_lists);
  builder_.add_header(header);
  return builder_.Finish();
}

inline flatbuffers::Offset<GraphFile> CreateGraphFileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<MVCNN::SummaryHeader> header = 0,
    const std::vector<flatbuffers::Offset<MVCNN::TaskList>> *task_lists = nullptr,
    const std::vector<flatbuffers::Offset<MVCNN::Barrier>> *barrier_table = nullptr,
    const std::vector<flatbuffers::Offset<MVCNN::BinaryData>> *binary_data = nullptr) {
  auto task_lists__ = task_lists ? _fbb.CreateVector<flatbuffers::Offset<MVCNN::TaskList>>(*task_lists) : 0;
  auto barrier_table__ = barrier_table ? _fbb.CreateVector<flatbuffers::Offset<MVCNN::Barrier>>(*barrier_table) : 0;
  if (binary_data) { _fbb.ForceVectorAlignment(binary_data->size(), sizeof(flatbuffers::Offset<MVCNN::BinaryData>), 64); }
  auto binary_data__ = binary_data ? _fbb.CreateVector<flatbuffers::Offset<MVCNN::BinaryData>>(*binary_data) : 0;
  return MVCNN::CreateGraphFile(
      _fbb,
      header,
      task_lists__,
      barrier_table__,
      binary_data__);
}

flatbuffers::Offset<GraphFile> CreateGraphFile(flatbuffers::FlatBufferBuilder &_fbb, const GraphFileT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TaskListT : public flatbuffers::NativeTable {
  typedef TaskList TableType;
  std::vector<std::unique_ptr<MVCNN::TaskT>> content;
  TaskListT() {
  }
};

struct TaskList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TaskListT NativeTableType;
  typedef TaskListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<MVCNN::Task>> *content() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MVCNN::Task>> *>(VT_CONTENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyVector(content()) &&
           verifier.VerifyVectorOfTables(content()) &&
           verifier.EndTable();
  }
  TaskListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TaskList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TaskListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TaskListBuilder {
  typedef TaskList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_content(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::Task>>> content) {
    fbb_.AddOffset(TaskList::VT_CONTENT, content);
  }
  explicit TaskListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TaskListBuilder &operator=(const TaskListBuilder &);
  flatbuffers::Offset<TaskList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TaskList>(end);
    return o;
  }
};

inline flatbuffers::Offset<TaskList> CreateTaskList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MVCNN::Task>>> content = 0) {
  TaskListBuilder builder_(_fbb);
  builder_.add_content(content);
  return builder_.Finish();
}

inline flatbuffers::Offset<TaskList> CreateTaskListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<MVCNN::Task>> *content = nullptr) {
  auto content__ = content ? _fbb.CreateVector<flatbuffers::Offset<MVCNN::Task>>(*content) : 0;
  return MVCNN::CreateTaskList(
      _fbb,
      content__);
}

flatbuffers::Offset<TaskList> CreateTaskList(flatbuffers::FlatBufferBuilder &_fbb, const TaskListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TaskT : public flatbuffers::NativeTable {
  typedef Task TableType;
  std::string name;
  uint32_t nodeID;
  std::vector<uint32_t> sourceTaskIDs;
  std::unique_ptr<MVCNN::BarrierReferenceT> associated_barriers;
  MVCNN::SpecificTaskUnion task;
  TaskT()
      : nodeID(0) {
  }
};

struct Task FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TaskT NativeTableType;
  typedef TaskBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_NODEID = 6,
    VT_SOURCETASKIDS = 8,
    VT_ASSOCIATED_BARRIERS = 10,
    VT_TASK_TYPE = 12,
    VT_TASK = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t nodeID() const {
    return GetField<uint32_t>(VT_NODEID, 0);
  }
  const flatbuffers::Vector<uint32_t> *sourceTaskIDs() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_SOURCETASKIDS);
  }
  const MVCNN::BarrierReference *associated_barriers() const {
    return GetPointer<const MVCNN::BarrierReference *>(VT_ASSOCIATED_BARRIERS);
  }
  MVCNN::SpecificTask task_type() const {
    return static_cast<MVCNN::SpecificTask>(GetField<uint8_t>(VT_TASK_TYPE, 0));
  }
  const void *task() const {
    return GetPointer<const void *>(VT_TASK);
  }
  template<typename T> const T *task_as() const;
  const MVCNN::MvTensorTask *task_as_MvTensorTask() const {
    return task_type() == MVCNN::SpecificTask_MvTensorTask ? static_cast<const MVCNN::MvTensorTask *>(task()) : nullptr;
  }
  const MVCNN::UPADMATask *task_as_UPADMATask() const {
    return task_type() == MVCNN::SpecificTask_UPADMATask ? static_cast<const MVCNN::UPADMATask *>(task()) : nullptr;
  }
  const MVCNN::NNDMATask *task_as_NNDMATask() const {
    return task_type() == MVCNN::SpecificTask_NNDMATask ? static_cast<const MVCNN::NNDMATask *>(task()) : nullptr;
  }
  const MVCNN::NCE1Task *task_as_NCE1Task() const {
    return task_type() == MVCNN::SpecificTask_NCE1Task ? static_cast<const MVCNN::NCE1Task *>(task()) : nullptr;
  }
  const MVCNN::NCE2Task *task_as_NCE2Task() const {
    return task_type() == MVCNN::SpecificTask_NCE2Task ? static_cast<const MVCNN::NCE2Task *>(task()) : nullptr;
  }
  const MVCNN::NNTensorTask *task_as_NNTensorTask() const {
    return task_type() == MVCNN::SpecificTask_NNTensorTask ? static_cast<const MVCNN::NNTensorTask *>(task()) : nullptr;
  }
  const MVCNN::ControllerTask *task_as_ControllerTask() const {
    return task_type() == MVCNN::SpecificTask_ControllerTask ? static_cast<const MVCNN::ControllerTask *>(task()) : nullptr;
  }
  const MVCNN::UPALayerTask *task_as_UPALayerTask() const {
    return task_type() == MVCNN::SpecificTask_UPALayerTask ? static_cast<const MVCNN::UPALayerTask *>(task()) : nullptr;
  }
  const MVCNN::SNNLayerTask *task_as_SNNLayerTask() const {
    return task_type() == MVCNN::SpecificTask_SNNLayerTask ? static_cast<const MVCNN::SNNLayerTask *>(task()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_NODEID) &&
           VerifyOffset(verifier, VT_SOURCETASKIDS) &&
           verifier.VerifyVector(sourceTaskIDs()) &&
           VerifyOffset(verifier, VT_ASSOCIATED_BARRIERS) &&
           verifier.VerifyTable(associated_barriers()) &&
           VerifyField<uint8_t>(verifier, VT_TASK_TYPE) &&
           VerifyOffset(verifier, VT_TASK) &&
           VerifySpecificTask(verifier, task(), task_type()) &&
           verifier.EndTable();
  }
  TaskT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Task> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TaskT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const MVCNN::MvTensorTask *Task::task_as<MVCNN::MvTensorTask>() const {
  return task_as_MvTensorTask();
}

template<> inline const MVCNN::UPADMATask *Task::task_as<MVCNN::UPADMATask>() const {
  return task_as_UPADMATask();
}

template<> inline const MVCNN::NNDMATask *Task::task_as<MVCNN::NNDMATask>() const {
  return task_as_NNDMATask();
}

template<> inline const MVCNN::NCE1Task *Task::task_as<MVCNN::NCE1Task>() const {
  return task_as_NCE1Task();
}

template<> inline const MVCNN::NCE2Task *Task::task_as<MVCNN::NCE2Task>() const {
  return task_as_NCE2Task();
}

template<> inline const MVCNN::NNTensorTask *Task::task_as<MVCNN::NNTensorTask>() const {
  return task_as_NNTensorTask();
}

template<> inline const MVCNN::ControllerTask *Task::task_as<MVCNN::ControllerTask>() const {
  return task_as_ControllerTask();
}

template<> inline const MVCNN::UPALayerTask *Task::task_as<MVCNN::UPALayerTask>() const {
  return task_as_UPALayerTask();
}

template<> inline const MVCNN::SNNLayerTask *Task::task_as<MVCNN::SNNLayerTask>() const {
  return task_as_SNNLayerTask();
}

struct TaskBuilder {
  typedef Task Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Task::VT_NAME, name);
  }
  void add_nodeID(uint32_t nodeID) {
    fbb_.AddElement<uint32_t>(Task::VT_NODEID, nodeID, 0);
  }
  void add_sourceTaskIDs(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> sourceTaskIDs) {
    fbb_.AddOffset(Task::VT_SOURCETASKIDS, sourceTaskIDs);
  }
  void add_associated_barriers(flatbuffers::Offset<MVCNN::BarrierReference> associated_barriers) {
    fbb_.AddOffset(Task::VT_ASSOCIATED_BARRIERS, associated_barriers);
  }
  void add_task_type(MVCNN::SpecificTask task_type) {
    fbb_.AddElement<uint8_t>(Task::VT_TASK_TYPE, static_cast<uint8_t>(task_type), 0);
  }
  void add_task(flatbuffers::Offset<void> task) {
    fbb_.AddOffset(Task::VT_TASK, task);
  }
  explicit TaskBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TaskBuilder &operator=(const TaskBuilder &);
  flatbuffers::Offset<Task> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Task>(end);
    return o;
  }
};

inline flatbuffers::Offset<Task> CreateTask(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t nodeID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> sourceTaskIDs = 0,
    flatbuffers::Offset<MVCNN::BarrierReference> associated_barriers = 0,
    MVCNN::SpecificTask task_type = MVCNN::SpecificTask_NONE,
    flatbuffers::Offset<void> task = 0) {
  TaskBuilder builder_(_fbb);
  builder_.add_task(task);
  builder_.add_associated_barriers(associated_barriers);
  builder_.add_sourceTaskIDs(sourceTaskIDs);
  builder_.add_nodeID(nodeID);
  builder_.add_name(name);
  builder_.add_task_type(task_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Task> CreateTaskDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t nodeID = 0,
    const std::vector<uint32_t> *sourceTaskIDs = nullptr,
    flatbuffers::Offset<MVCNN::BarrierReference> associated_barriers = 0,
    MVCNN::SpecificTask task_type = MVCNN::SpecificTask_NONE,
    flatbuffers::Offset<void> task = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto sourceTaskIDs__ = sourceTaskIDs ? _fbb.CreateVector<uint32_t>(*sourceTaskIDs) : 0;
  return MVCNN::CreateTask(
      _fbb,
      name__,
      nodeID,
      sourceTaskIDs__,
      associated_barriers,
      task_type,
      task);
}

flatbuffers::Offset<Task> CreateTask(flatbuffers::FlatBufferBuilder &_fbb, const TaskT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GraphFileT *GraphFile::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<MVCNN::GraphFileT> _o = std::unique_ptr<MVCNN::GraphFileT>(new GraphFileT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GraphFile::UnPackTo(GraphFileT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = header(); if (_e) _o->header = std::unique_ptr<MVCNN::SummaryHeaderT>(_e->UnPack(_resolver)); }
  { auto _e = task_lists(); if (_e) { _o->task_lists.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->task_lists[_i] = std::unique_ptr<MVCNN::TaskListT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = barrier_table(); if (_e) { _o->barrier_table.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->barrier_table[_i] = std::unique_ptr<MVCNN::BarrierT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = binary_data(); if (_e) { _o->binary_data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->binary_data[_i] = std::unique_ptr<MVCNN::BinaryDataT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<GraphFile> GraphFile::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GraphFileT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGraphFile(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GraphFile> CreateGraphFile(flatbuffers::FlatBufferBuilder &_fbb, const GraphFileT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GraphFileT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _header = _o->header ? CreateSummaryHeader(_fbb, _o->header.get(), _rehasher) : 0;
  auto _task_lists = _fbb.CreateVector<flatbuffers::Offset<MVCNN::TaskList>> (_o->task_lists.size(), [](size_t i, _VectorArgs *__va) { return CreateTaskList(*__va->__fbb, __va->__o->task_lists[i].get(), __va->__rehasher); }, &_va );
  auto _barrier_table = _fbb.CreateVector<flatbuffers::Offset<MVCNN::Barrier>> (_o->barrier_table.size(), [](size_t i, _VectorArgs *__va) { return CreateBarrier(*__va->__fbb, __va->__o->barrier_table[i].get(), __va->__rehasher); }, &_va );
  _fbb.ForceVectorAlignment(_o->binary_data.size(), sizeof(flatbuffers::Offset<MVCNN::BinaryData>), 64);
  auto _binary_data = _fbb.CreateVector<flatbuffers::Offset<MVCNN::BinaryData>> (_o->binary_data.size(), [](size_t i, _VectorArgs *__va) { return CreateBinaryData(*__va->__fbb, __va->__o->binary_data[i].get(), __va->__rehasher); }, &_va );
  return MVCNN::CreateGraphFile(
      _fbb,
      _header,
      _task_lists,
      _barrier_table,
      _binary_data);
}

inline TaskListT *TaskList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<MVCNN::TaskListT> _o = std::unique_ptr<MVCNN::TaskListT>(new TaskListT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TaskList::UnPackTo(TaskListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = content(); if (_e) { _o->content.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->content[_i] = std::unique_ptr<MVCNN::TaskT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<TaskList> TaskList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TaskListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTaskList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TaskList> CreateTaskList(flatbuffers::FlatBufferBuilder &_fbb, const TaskListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TaskListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _content = _fbb.CreateVector<flatbuffers::Offset<MVCNN::Task>> (_o->content.size(), [](size_t i, _VectorArgs *__va) { return CreateTask(*__va->__fbb, __va->__o->content[i].get(), __va->__rehasher); }, &_va );
  return MVCNN::CreateTaskList(
      _fbb,
      _content);
}

inline TaskT *Task::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<MVCNN::TaskT> _o = std::unique_ptr<MVCNN::TaskT>(new TaskT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Task::UnPackTo(TaskT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = nodeID(); _o->nodeID = _e; }
  { auto _e = sourceTaskIDs(); if (_e) { _o->sourceTaskIDs.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->sourceTaskIDs[_i] = _e->Get(_i); } } }
  { auto _e = associated_barriers(); if (_e) _o->associated_barriers = std::unique_ptr<MVCNN::BarrierReferenceT>(_e->UnPack(_resolver)); }
  { auto _e = task_type(); _o->task.type = _e; }
  { auto _e = task(); if (_e) _o->task.value = MVCNN::SpecificTaskUnion::UnPack(_e, task_type(), _resolver); }
}

inline flatbuffers::Offset<Task> Task::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TaskT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTask(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Task> CreateTask(flatbuffers::FlatBufferBuilder &_fbb, const TaskT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TaskT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->name);
  auto _nodeID = _o->nodeID;
  auto _sourceTaskIDs = _fbb.CreateVector(_o->sourceTaskIDs);
  auto _associated_barriers = _o->associated_barriers ? CreateBarrierReference(_fbb, _o->associated_barriers.get(), _rehasher) : 0;
  auto _task_type = _o->task.type;
  auto _task = _o->task.Pack(_fbb);
  return MVCNN::CreateTask(
      _fbb,
      _name,
      _nodeID,
      _sourceTaskIDs,
      _associated_barriers,
      _task_type,
      _task);
}

inline bool VerifySpecificTask(flatbuffers::Verifier &verifier, const void *obj, SpecificTask type) {
  switch (type) {
    case SpecificTask_NONE: {
      return true;
    }
    case SpecificTask_MvTensorTask: {
      auto ptr = reinterpret_cast<const MVCNN::MvTensorTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_UPADMATask: {
      auto ptr = reinterpret_cast<const MVCNN::UPADMATask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_NNDMATask: {
      auto ptr = reinterpret_cast<const MVCNN::NNDMATask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_NCE1Task: {
      auto ptr = reinterpret_cast<const MVCNN::NCE1Task *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_NCE2Task: {
      auto ptr = reinterpret_cast<const MVCNN::NCE2Task *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_NNTensorTask: {
      auto ptr = reinterpret_cast<const MVCNN::NNTensorTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_ControllerTask: {
      auto ptr = reinterpret_cast<const MVCNN::ControllerTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_UPALayerTask: {
      auto ptr = reinterpret_cast<const MVCNN::UPALayerTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SpecificTask_SNNLayerTask: {
      auto ptr = reinterpret_cast<const MVCNN::SNNLayerTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifySpecificTaskVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifySpecificTask(
        verifier,  values->Get(i), types->GetEnum<SpecificTask>(i))) {
      return false;
    }
  }
  return true;
}

inline void *SpecificTaskUnion::UnPack(const void *obj, SpecificTask type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case SpecificTask_MvTensorTask: {
      auto ptr = reinterpret_cast<const MVCNN::MvTensorTask *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_UPADMATask: {
      auto ptr = reinterpret_cast<const MVCNN::UPADMATask *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_NNDMATask: {
      auto ptr = reinterpret_cast<const MVCNN::NNDMATask *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_NCE1Task: {
      auto ptr = reinterpret_cast<const MVCNN::NCE1Task *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_NCE2Task: {
      auto ptr = reinterpret_cast<const MVCNN::NCE2Task *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_NNTensorTask: {
      auto ptr = reinterpret_cast<const MVCNN::NNTensorTask *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_ControllerTask: {
      auto ptr = reinterpret_cast<const MVCNN::ControllerTask *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_UPALayerTask: {
      auto ptr = reinterpret_cast<const MVCNN::UPALayerTask *>(obj);
      return ptr->UnPack(resolver);
    }
    case SpecificTask_SNNLayerTask: {
      auto ptr = reinterpret_cast<const MVCNN::SNNLayerTask *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> SpecificTaskUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case SpecificTask_MvTensorTask: {
      auto ptr = reinterpret_cast<const MVCNN::MvTensorTaskT *>(value);
      return CreateMvTensorTask(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_UPADMATask: {
      auto ptr = reinterpret_cast<const MVCNN::UPADMATaskT *>(value);
      return CreateUPADMATask(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_NNDMATask: {
      auto ptr = reinterpret_cast<const MVCNN::NNDMATaskT *>(value);
      return CreateNNDMATask(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_NCE1Task: {
      auto ptr = reinterpret_cast<const MVCNN::NCE1TaskT *>(value);
      return CreateNCE1Task(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_NCE2Task: {
      auto ptr = reinterpret_cast<const MVCNN::NCE2TaskT *>(value);
      return CreateNCE2Task(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_NNTensorTask: {
      auto ptr = reinterpret_cast<const MVCNN::NNTensorTaskT *>(value);
      return CreateNNTensorTask(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_ControllerTask: {
      auto ptr = reinterpret_cast<const MVCNN::ControllerTaskT *>(value);
      return CreateControllerTask(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_UPALayerTask: {
      auto ptr = reinterpret_cast<const MVCNN::UPALayerTaskT *>(value);
      return CreateUPALayerTask(_fbb, ptr, _rehasher).Union();
    }
    case SpecificTask_SNNLayerTask: {
      auto ptr = reinterpret_cast<const MVCNN::SNNLayerTaskT *>(value);
      return CreateSNNLayerTask(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline SpecificTaskUnion::SpecificTaskUnion(const SpecificTaskUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case SpecificTask_MvTensorTask: {
      value = new MVCNN::MvTensorTaskT(*reinterpret_cast<MVCNN::MvTensorTaskT *>(u.value));
      break;
    }
    case SpecificTask_UPADMATask: {
      FLATBUFFERS_ASSERT(false);  // MVCNN::UPADMATaskT not copyable.
      break;
    }
    case SpecificTask_NNDMATask: {
      FLATBUFFERS_ASSERT(false);  // MVCNN::NNDMATaskT not copyable.
      break;
    }
    case SpecificTask_NCE1Task: {
      value = new MVCNN::NCE1TaskT(*reinterpret_cast<MVCNN::NCE1TaskT *>(u.value));
      break;
    }
    case SpecificTask_NCE2Task: {
      FLATBUFFERS_ASSERT(false);  // MVCNN::NCE2TaskT not copyable.
      break;
    }
    case SpecificTask_NNTensorTask: {
      value = new MVCNN::NNTensorTaskT(*reinterpret_cast<MVCNN::NNTensorTaskT *>(u.value));
      break;
    }
    case SpecificTask_ControllerTask: {
      value = new MVCNN::ControllerTaskT(*reinterpret_cast<MVCNN::ControllerTaskT *>(u.value));
      break;
    }
    case SpecificTask_UPALayerTask: {
      FLATBUFFERS_ASSERT(false);  // MVCNN::UPALayerTaskT not copyable.
      break;
    }
    case SpecificTask_SNNLayerTask: {
      value = new MVCNN::SNNLayerTaskT(*reinterpret_cast<MVCNN::SNNLayerTaskT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void SpecificTaskUnion::Reset() {
  switch (type) {
    case SpecificTask_MvTensorTask: {
      auto ptr = reinterpret_cast<MVCNN::MvTensorTaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_UPADMATask: {
      auto ptr = reinterpret_cast<MVCNN::UPADMATaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_NNDMATask: {
      auto ptr = reinterpret_cast<MVCNN::NNDMATaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_NCE1Task: {
      auto ptr = reinterpret_cast<MVCNN::NCE1TaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_NCE2Task: {
      auto ptr = reinterpret_cast<MVCNN::NCE2TaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_NNTensorTask: {
      auto ptr = reinterpret_cast<MVCNN::NNTensorTaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_ControllerTask: {
      auto ptr = reinterpret_cast<MVCNN::ControllerTaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_UPALayerTask: {
      auto ptr = reinterpret_cast<MVCNN::UPALayerTaskT *>(value);
      delete ptr;
      break;
    }
    case SpecificTask_SNNLayerTask: {
      auto ptr = reinterpret_cast<MVCNN::SNNLayerTaskT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = SpecificTask_NONE;
}

inline const MVCNN::GraphFile *GetGraphFile(const void *buf) {
  return flatbuffers::GetRoot<MVCNN::GraphFile>(buf);
}

inline const MVCNN::GraphFile *GetSizePrefixedGraphFile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MVCNN::GraphFile>(buf);
}

inline const char *GraphFileIdentifier() {
  return "BLOB";
}

inline bool GraphFileBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, GraphFileIdentifier());
}

inline bool VerifyGraphFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MVCNN::GraphFile>(GraphFileIdentifier());
}

inline bool VerifySizePrefixedGraphFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MVCNN::GraphFile>(GraphFileIdentifier());
}

inline const char *GraphFileExtension() {
  return "blob";
}

inline void FinishGraphFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MVCNN::GraphFile> root) {
  fbb.Finish(root, GraphFileIdentifier());
}

inline void FinishSizePrefixedGraphFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MVCNN::GraphFile> root) {
  fbb.FinishSizePrefixed(root, GraphFileIdentifier());
}

inline std::unique_ptr<MVCNN::GraphFileT> UnPackGraphFile(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<MVCNN::GraphFileT>(GetGraphFile(buf)->UnPack(res));
}

inline std::unique_ptr<MVCNN::GraphFileT> UnPackSizePrefixedGraphFile(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<MVCNN::GraphFileT>(GetSizePrefixedGraphFile(buf)->UnPack(res));
}

}  // namespace MVCNN

#endif  // FLATBUFFERS_GENERATED_GRAPHFILE_MVCNN_H_
