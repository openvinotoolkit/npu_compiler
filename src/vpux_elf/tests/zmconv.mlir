#NHWC = affine_map<(d0, d1, d2, d3) -> (d0, d2, d3, d1)>
module @mainModule attributes {VPUIP.arch = "MTL", VPUIP.compilationMode = "ReferenceHW"}  {
  VPUIP.Graph options : "NONE" version : {contextStr = "VPUX Compiler", hash = "2021.4.1-release", majorV = 3 : i64, minorV = 28 : i64, patchV = 0 : i64}
  IERT.RunTimeResources availableMemory :  {
    MemoryResource 524288000 bytes of "DDR" {VPUIP.bandwidth = 8 : i64, VPUIP.derateFactor = 6.000000e-01 : f64}
    MemoryResource 1982464 bytes of "CMX_NN" {VPUIP.bandwidth = 32 : i64, VPUIP.derateFactor = 1.000000e+00 : f64}
  } usedMemory :  {
  } executors :  {
    ExecutorResource 2 of "DMA_NN"
    ExecutorResource {VPUIP.processorFrequency = 7.000000e+02 : f64} 2 of "NCE_Cluster"  {
      ExecutorResource 1 of "NCE_PerClusterDPU"
    }
  }
  func private @zmajor_conv_f16_f16_f16(%arg0: memref<1x16x16x16xf16, #NHWC, "ProgrammableInput">, %arg1: memref<1x64x16x16xf16, #NHWC, "ProgrammableOutput">) -> memref<1x64x16x16xf16, #NHWC, "ProgrammableOutput"> {
    %cst = const.Declare memref<64x16x1x1xf16, #NHWC, "GraphFile"> = #const.Content<dense<0.000000e+00> : tensor<64x16x1x1xf16>, [#const.Reorder<#NHWC>]>
    %0 = VPUIP.DeclareTensor "VPU_CMX_NN" [0] <41984> -> memref<64x16x1x1xf16, #NHWC, "VPU_CMX_NN">
    %1 = VPUIP.DeclareTensor "VPU_CMX_NN" [0] <32768> -> memref<1x16x16x16xf16, #NHWC, "VPU_CMX_NN">
    %2 = VPUIP.DeclareTensor "VPU_CMX_NN" [0] <0> -> memref<1x64x16x16xf16, #NHWC, "VPU_CMX_NN">
    %cst_0 = const.Declare memref<64x1x1x4xsi32, #NHWC, "GraphFile"> = #const.Content<dense<"0xtensor<64x1x1x4xsi32>, [#const.Reorder<#NHWC>]>
    %3 = VPUIP.DeclareTensor "VPU_CMX_NN" [0] <40960> -> memref<64x1x1x4xsi32, #NHWC, "VPU_CMX_NN">
    %4 = VPUIP.ConfigureBarrier<0> -> !VPUIP.Barrier
    %5 = VPUIP.ConfigureBarrier<1> -> !VPUIP.Barrier
    %6 = VPUIP.NNDMA {port = 0 : i64, set_crit = false, set_ord = true} inputs(%arg0 : memref<1x16x16x16xf16, #NHWC, "ProgrammableInput">) outputs(%1 : memref<1x16x16x16xf16, #NHWC, "VPU_CMX_NN">) updates(%4 : !VPUIP.Barrier) -> memref<1x16x16x16xf16, #NHWC, "VPU_CMX_NN">
    %7 = VPUIP.NNDMA {port = 0 : i64, set_crit = false, set_ord = true} inputs(%cst : memref<64x16x1x1xf16, #NHWC, "GraphFile">) outputs(%0 : memref<64x16x1x1xf16, #NHWC, "VPU_CMX_NN">) updates(%4 : !VPUIP.Barrier) -> memref<64x16x1x1xf16, #NHWC, "VPU_CMX_NN">
    %8 = VPUIP.NNDMA {port = 0 : i64, set_crit = false, set_ord = true} inputs(%cst_0 : memref<64x1x1x4xsi32, #NHWC, "GraphFile">) outputs(%3 : memref<64x1x1x4xsi32, #NHWC, "VPU_CMX_NN">) updates(%4 : !VPUIP.Barrier) -> memref<64x1x1x4xsi32, #NHWC, "VPU_CMX_NN">
    %9 = VPUIP.NNDMA {port = 0 : i64, set_crit = false, set_ord = true} inputs(%2 : memref<1x64x16x16xf16, #NHWC, "VPU_CMX_NN">) outputs(%arg1 : memref<1x64x16x16xf16, #NHWC, "ProgrammableOutput">) waits(%5 : !VPUIP.Barrier) -> memref<1x64x16x16xf16, #NHWC, "ProgrammableOutput">
    %10 = VPUIP.NCEClusterTask {kernel_padding = [0, 0, 0, 0], kernel_size = [1, 1], kernel_strides = [1, 1], task_type = "CONV"} input(%1 : memref<1x16x16x16xf16, #NHWC, "VPU_CMX_NN">) weights(%0 : memref<64x16x1x1xf16, #NHWC, "VPU_CMX_NN">) weight_table(%3 : memref<64x1x1x4xsi32, #NHWC, "VPU_CMX_NN">) parent_input(%1 : memref<1x16x16x16xf16, #NHWC, "VPU_CMX_NN">) parent_output(%2 : memref<1x64x16x16xf16, #NHWC, "VPU_CMX_NN">) outputs(%2 : memref<1x64x16x16xf16, #NHWC, "VPU_CMX_NN">) waits(%4 : !VPUIP.Barrier) updates(%5 : !VPUIP.Barrier) -> memref<1x64x16x16xf16, #NHWC, "VPU_CMX_NN"> variants :  {
      DPUTask {end = [15, 15, 63], mpe_mode = "CUBOID_16x16", pad = {bottom = 0 : i64, left = 0 : i64, right = 0 : i64, top = 0 : i64}, start = [0, 0, 0]}
    } PPE :  {
    }
    return %arg1 : memref<1x64x16x16xf16, #NHWC, "ProgrammableOutput">
  }
  IE.CNNNetwork entryPoint : @zmajor_conv_f16_f16_f16 inputsInfo :  {
    DataInfo "input_0" : tensor<1x16x16x16xf16, {order = #NHWC}>
  } outputsInfo :  {
    DataInfo "output_0" : tensor<1x64x16x16xf16, {order = #NHWC}>
  }
}
