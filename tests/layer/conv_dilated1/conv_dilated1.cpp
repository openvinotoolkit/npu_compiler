// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"
#include "templateExampleNew.data.inc"

void build_pySwigCU(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_3_0 = model.input({16, 16, 3, 1}, mv::DType("UInt8"), mv::Order("NHWC"), {{128},{0.007843137718737},{-1.000000000000000},{1.000000000000000},{0},{1}}, "input#3");
    const auto Conv_Relu6_Conv_Relu6_0_weights_1_0 = model.constantInt(Conv_Relu6_Conv_Relu6_0_weights_1_0_data, {2, 2, 3, 1}, mv::DType("UInt8"), mv::Order("NCHW"), {{145},{0.001586804166436},{-0.230153873562813},{0.174481183290482},{0},{1}}, "Conv/Relu6/Conv/Relu6#0_weights#1");
    const auto Conv_Relu6_Conv_Relu6_4_0 = model.conv(input_3_0, Conv_Relu6_Conv_Relu6_0_weights_1_0, {1, 1}, {0, 1, 0, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "Conv/Relu6/Conv/Relu6#4");
    const auto Conv_Relu6_Conv_Relu6_0_bias_2weights_0 = model.constantInt({5264}, {1}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000012445522771},{-inf},{inf},{0},{1}}, "Conv/Relu6/Conv/Relu6#0_bias#2weights");
    const auto Conv_Relu6_Conv_Relu6_0_bias_2_0 = model.bias(Conv_Relu6_Conv_Relu6_4_0, Conv_Relu6_Conv_Relu6_0_bias_2weights_0, mv::DType("UInt8"), {{0},{0.000012445522771},{-inf},{inf},{0},{1}}, "Conv/Relu6/Conv/Relu6#0_bias#2");
    const auto output = model.output(Conv_Relu6_Conv_Relu6_0_bias_2_0, mv::DType("Default"), {{},{},{},{}}, "");
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_pySwigCU(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb_MC-PrefetchAdaptive.json";
    unit.loadCompilationDescriptor(compDescPath);

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}


// 1. Generate 2x2 tflite model and record it 
// 2. Copy 2x2 recorded model into layer test and set DF=2. 
// 3. Generate blob with dilated weights in it. This will use the dilated pass. Blob run on IMD to get output.
// 4. Go to convolution.py and hardcode dilated 3x3 kernel in the function with the kernel data from the 2x2 example.
// 5. Generate a tflite model with the 3x3 kernel and get expected output from emulator.
// 6. Compare step 3 with step 5. 


