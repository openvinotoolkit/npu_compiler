
// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"

int main()
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    mv::CompilationUnit unit("Mixed_mode");
    mv::OpModel& model = unit.model();
    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);
    unit.loadTargetDescriptor(mv::Target::ma2490);
    //input full of 0.5
    const auto data_0 = model.input({64, 64, 512, 1}, mv::DType("UInt8"), mv::Order("NHWC"), {{0},{0.00196078431372549},{-inf},{inf},{0},{1}}, "data");

    //Weights i take 0.8 and split it to 16 channels 16 values. First channels full of 0.8/16 and so on...
    std::vector<int64_t> weightsData = {};
    std::vector<int64_t> weightsData0 = mv::utils::generateSequence<int64_t> (4608, 16, 0);
    std::vector<int64_t> weightsData1 = mv::utils::generateSequence<int64_t> (4608, 32, 0);
    std::vector<int64_t> weightsData2 = mv::utils::generateSequence<int64_t> (4608, 48, 0);
    std::vector<int64_t> weightsData3 = mv::utils::generateSequence<int64_t> (4608, 64, 0);
    std::vector<int64_t> weightsData4 = mv::utils::generateSequence<int64_t> (4608, 80, 0);
    std::vector<int64_t> weightsData5 = mv::utils::generateSequence<int64_t> (4608, 96, 0);
    std::vector<int64_t> weightsData6 = mv::utils::generateSequence<int64_t> (4608, 112, 0);
    std::vector<int64_t> weightsData7 = mv::utils::generateSequence<int64_t> (4608, 128, 0);
    std::vector<int64_t> weightsData8 = mv::utils::generateSequence<int64_t> (4608, 144, 0);
    std::vector<int64_t> weightsData9 = mv::utils::generateSequence<int64_t> (4608, 160, 0);
    std::vector<int64_t> weightsData10 = mv::utils::generateSequence<int64_t> (4608, 176, 0);
    std::vector<int64_t> weightsData11 = mv::utils::generateSequence<int64_t> (4608, 192, 0);
    std::vector<int64_t> weightsData12 = mv::utils::generateSequence<int64_t> (4608, 208, 0);
    std::vector<int64_t> weightsData13 = mv::utils::generateSequence<int64_t> (4608, 224, 0);
    std::vector<int64_t> weightsData14 = mv::utils::generateSequence<int64_t> (4608, 240, 0);
    std::vector<int64_t> weightsData15 = mv::utils::generateSequence<int64_t> (4608, 255, 0);
    weightsData.insert( weightsData.end(), weightsData0.begin(), weightsData0.end() );
    weightsData.insert( weightsData.end(), weightsData1.begin(), weightsData1.end() );
    weightsData.insert( weightsData.end(), weightsData2.begin(), weightsData2.end() );
    weightsData.insert( weightsData.end(), weightsData3.begin(), weightsData3.end() );
    weightsData.insert( weightsData.end(), weightsData4.begin(), weightsData4.end() );
    weightsData.insert( weightsData.end(), weightsData5.begin(), weightsData5.end() );
    weightsData.insert( weightsData.end(), weightsData6.begin(), weightsData6.end() );
    weightsData.insert( weightsData.end(), weightsData7.begin(), weightsData7.end() );
    weightsData.insert( weightsData.end(), weightsData8.begin(), weightsData8.end() );
    weightsData.insert( weightsData.end(), weightsData9.begin(), weightsData9.end() );
    weightsData.insert( weightsData.end(), weightsData10.begin(), weightsData10.end() );
    weightsData.insert( weightsData.end(), weightsData11.begin(), weightsData11.end() );
    weightsData.insert( weightsData.end(), weightsData12.begin(), weightsData12.end() );
    weightsData.insert( weightsData.end(), weightsData13.begin(), weightsData13.end() );
    weightsData.insert( weightsData.end(), weightsData14.begin(), weightsData14.end() );
    weightsData.insert( weightsData.end(), weightsData15.begin(), weightsData15.end() );

    auto weights0 = model.constantInt(weightsData,{3,3,512,16}, mv::DType("UInt8"), mv::Order("NCHW"), {{0},{0.0031372549019607846},{},{}});
    auto conv0 = model.conv(data_0, weights0, {1, 1}, {0, 0, 0, 0}, 1, 1,  mv::DType("UInt8"),{{0},{1},{-inf},{inf},{0},{1}} , "conv");

    model.output(conv0, mv::DType("Float16"), {{},{},{},{}});
    unit.initialize();
    unit.run();
}
