//This file is the parsed network which is created through python.

// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"
#include "multiple_output_same_size.data.inc"

void build_pySwigCU(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_6_0 = model.input({64, 64, 3, 1}, mv::DType("UInt8"), mv::Order("NHWC"), {{128},{0.007843137718737},{-1.000000000000000},{1.000000000000000},{0},{1}}, "input#6");
    const auto conv_0_weights_1_0 = model.constantInt(conv_0_weights_1_0_data, {3, 3, 3, 64}, mv::DType("UInt8"), mv::Order("NCHW"), {{128},{0.002404872793704},{-0.307943463325500},{0.305299073457718},{0},{1}}, "conv#0_weights#1");
    const auto conv_7_0 = model.conv(input_6_0, conv_0_weights_1_0, {1, 1}, {1, 1, 1, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "conv#7");
    const auto conv_0_bias_2weights_0 = model.constantInt(conv_0_bias_2weights_0_data, {64}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000018861746867},{-inf},{inf},{0},{1}}, "conv#0_bias#2weights");
    const auto conv_0_bias_2_0 = model.bias(conv_7_0, conv_0_bias_2weights_0, mv::DType("UInt8"), {{0},{0.000018861746867},{-inf},{inf},{0},{1}}, "conv#0_bias#2");

    const auto output_3_weights_4_0 = model.constantInt(output_3_weights_4_0_data, {3, 3, 64, 128}, mv::DType("UInt8"), mv::Order("NCHW"), {{131},{0.003203542437404},{-0.420824050903320},{0.396079272031784},{0},{1}}, "output#3_weights#4");
    const auto output_8_0 = model.conv(conv_0_bias_2_0, output_3_weights_4_0, {1, 1}, {1, 1, 1, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "output#8");
    const auto output_3_bias_5weights_0 = model.constantInt(output_3_bias_5weights_0_data, {128}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5weights");
    const auto output_3_bias_5_0 = model.bias(output_8_0, output_3_bias_5weights_0, mv::DType("UInt8"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5");
    const auto output = model.output(output_3_bias_5_0, mv::DType("Default"), {{},{},{},{}}, true, "");
    //parallel branch
    const auto output_3_weights_4_0_1 = model.constantInt(output_3_weights_4_0_data, {3, 3, 64, 128}, mv::DType("UInt8"), mv::Order("NCHW"), {{131},{0.003203542437404},{-0.420824050903320},{0.396079272031784},{0},{1}}, "output#3_weights#4_1");
    const auto output_8_0_1 = model.conv(conv_0_bias_2_0, output_3_weights_4_0_1, {1, 1}, {1, 1, 1, 1}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859369},{0.000000000000000},{1.000000000000000},{0},{1}}, "output#8_1");
    const auto output_3_bias_5weights_0_1 = model.constantInt(output_3_bias_5weights_0_data, {128}, mv::DType("UInt8"), mv::Order("W"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5weights_1");
    const auto output_3_bias_5_0_1 = model.bias(output_8_0_1, output_3_bias_5weights_0_1, mv::DType("UInt8"), {{0},{0.000012562911252},{-inf},{inf},{0},{1}}, "output#3_bias#5_1");
    const auto output1 = model.output(output_3_bias_5_0_1, mv::DType("Default"), {{},{},{},{}}, true, "");
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_pySwigCU(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb_MC-PrefetchAdaptive.json";
    unit.loadCompilationDescriptor(compDescPath);

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}

/*#include "include/mcm/compiler/compilation_unit.hpp"
#include "include/mcm/utils/data_generator.hpp"
#include "include/mcm/op_model.hpp"
#include "include/mcm/utils/hardware_tests.hpp"

#include <iostream>
#include <fstream>

int main()
{
    double inf = std::numeric_limits<double>::infinity();

    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    auto input0 = om.input({64,64,3,1}, mv::DType("UInt8"), mv::Order::getZMajorID(4), {{128},{0.007843137718737125},{-1.0},{1.0}}, "input#6");

    // std::vector<int64_t> d_weightsData0 = mv::utils::generateSequence<int64_t> (1*1*3*1);
    // auto d_weights0 = om.constantInt(d_weightsData0,{1,1,3,1}, mv::DType("UInt8"), mv::Order::getZMajorID(4), {{70},{0.0008769026608206332},{-0.0611756406724453},{0.16243453323841095}}, "dw_conv1#0_weights#1");
    // auto depthConv0 = om.depthwiseConv(input0, d_weights0, {1, 1}, {0, 0, 0, 0}, 1, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}}, "dw_conv1#7");

    // std::vector<int64_t> biasd_WeightsData0 = mv::utils::generateSequence<int64_t> (3);
    // auto biasdWeights0 = om.constantInt(biasd_WeightsData0,{3}, mv::DType("UInt8"), mv::Order::getColMajorID(1), {{0},{6.877667601656867e-06},{-inf},{inf}}, "dw_conv1#0_bias#2");
    // auto bias_cd0 = om.bias(depthConv0, biasdWeights0, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}});

    std::vector<int64_t> weightsData0 = mv::utils::generateSequence<int64_t> (3*3*3*32);
    auto weights0 = om.constantInt(weightsData0,{3,3,3,32}, mv::DType("UInt8"), mv::Order::getZMajorID(4), {{105},{0.002647720742970705},{-0.2793084979057312},{0.3958602845668793}}, "conv1/conv1#3_weights#4");
    auto conv0 = om.conv(input0, weights0, {2, 2}, {0, 0, 0, 0}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}}, "conv1/conv1#8");

    std::vector<int64_t> biasWeightsData0 = mv::utils::generateSequence<int64_t> (32);
    auto biasWeights0 = om.constantInt(biasWeightsData0,{32}, mv::DType("UInt8"), mv::Order::getColMajorID(1), {{0},{1.038321806845488e-05},{-inf},{inf}}, "conv1/conv1#3_bias#5");
    auto bias_c0 = om.bias(conv0, biasWeights0, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}});


    // Parallel branches
    std::vector<int64_t> weightsData1 = mv::utils::generateSequence<int64_t> (3*3*32*16);
    auto weights1 = om.constantInt(weightsData1,{3,3,32,16}, mv::DType("UInt8"), mv::Order::getZMajorID(4), {{105},{0.002647720742970705},{-0.2793084979057312},{0.3958602845668793}}, "conv2a_weights");
    auto conv1 = om.conv(bias_c0, weights1, {2, 2}, {0, 0, 0, 0}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}}, "conv2a");

    std::vector<int64_t> biasWeightsData1 = mv::utils::generateSequence<int64_t> (16);
    auto biasWeights1 = om.constantInt(biasWeightsData1,{16}, mv::DType("UInt8"), mv::Order::getColMajorID(1), {{0},{1.038321806845488e-05},{-inf},{inf}}, "conv2a_bias");
    auto bias_c1 = om.bias(conv1, biasWeights1, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}});

    std::vector<int64_t> weightsData2 = mv::utils::generateSequence<int64_t> (3*3*32*16);
    auto weights2 = om.constantInt(weightsData2,{3,3,32,16}, mv::DType("UInt8"), mv::Order::getZMajorID(4), {{105},{0.002647720742970705},{-0.2793084979057312},{0.3958602845668793}}, "conv2b_weights");
    auto conv2 = om.conv(bias_c0, weights2, {2, 2}, {0, 0, 0, 0}, 1, 1, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}}, "conv2b");

    std::vector<int64_t> biasWeightsData2 = mv::utils::generateSequence<int64_t> (16);
    auto biasWeights2 = om.constantInt(biasWeightsData2, {16}, mv::DType("UInt8"), mv::Order::getColMajorID(1), {{0},{1.038321806845488e-05},{-inf},{inf}}, "conv2b_bias");
    auto bias_c2 = om.bias(conv2, biasWeights2, mv::DType("UInt8"), {{0},{0.003921568859368563},{0.0},{1.0}});


    om.output(bias_c1);
    om.output(bias_c2);

    std::string compDescPath =  mv::utils::projectRootPath() + "/config/compilation/release_kmb_MC-PrefetchAdaptive.json";
    unit.loadCompilationDescriptor(compDescPath);

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();
}*/
