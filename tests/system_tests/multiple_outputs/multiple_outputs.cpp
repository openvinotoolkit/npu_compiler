
// The file was generated by RecordedOpModel

#include <limits>
#include <include/mcm/op_model.hpp>
#include "include/mcm/compiler/compilation_unit.hpp"

void build_Function_5(mv::OpModel& model)
{
    using namespace mv;

    static const auto inf = std::numeric_limits<double>::infinity();

    const auto input_0 = model.input({32, 32, 3, 1}, mv::DType("UInt8"), mv::Order("NHWC"), {{0},{1.000000000000000},{-inf},{inf},{0},{1}}, true, "input");
    const auto Constant_0_0 = model.constant({1.000000, 1.000000, 1.000000}, {3}, mv::DType("Float32"), mv::Order("W"), {{0},{1.000000000000000},{-inf},{inf},{0},{1}}, "");
    const auto power_0 = model.scale(input_0, Constant_0_0, mv::DType("Default"), {{0},{1.000000000000000},{-inf},{inf},{0},{1}}, "power");
    const auto power_0_copy = model.copy(power_0);
    const auto sigmoid_0 = model.sigmoid(power_0_copy, mv::DType("Default"), {{0},{1.000000000000000},{-inf},{inf},{0},{1}}, "sigmoid");
    const auto output = model.output(power_0_copy, mv::DType("Float16"), {{},{},{},{}}, true, "");
    const auto output1 = model.output(sigmoid_0, mv::DType("Float16"), {{},{},{},{}}, true, "");
}

int main()
{
    mv::CompilationUnit unit("parserModel");
    mv::OpModel& om = unit.model();
    build_Function_5(om);

    std::string compDescPath = mv::utils::projectRootPath() + "/config/compilation/release_kmb.json";
    unit.loadCompilationDescriptor(compDescPath);

    unit.loadTargetDescriptor(mv::Target::ma2490);
    unit.initialize();
    unit.run();

    return 0;
}

