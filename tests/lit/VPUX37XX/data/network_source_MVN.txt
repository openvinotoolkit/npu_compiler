#loc0 = loc(unknown)
module @MVN_case1 {
  IE.CNNNetwork entryPoint : @main inputsInfo : {
    DataInfo "input" : tensor<1x4x512xf32> loc(#loc0)
  } outputsInfo : {
    DataInfo "Div_0" : tensor<1x4x512xf32> loc(#loc0)
  } profilingOutputsInfo : {
  } loc(#loc0)
  func @main(%arg0: tensor<1x4x512xf16> loc(unknown)) -> tensor<1x4x512xf16> {
    %cst_0 = const.Declare tensor<4xsi64> = dense<[1, 4, 512, 1]> : tensor<4xsi64> loc(#loc3)
    %1 = IE.Reshape(%arg0, %cst_0) : tensor<1x4x512xf16>, tensor<4xsi64> -> tensor<1x4x512x1xf16> loc(#loc4)
    %2 = IE.MVN(%1) {across_channels = false, eps = 1.0013580322265625E-5 : f64, normalize_variance = true} : tensor<1x4x512x1xf16> -> tensor<1x4x512x1xf16> loc(#loc5)
    %3 = IE.MVN(%2) {across_channels = false, eps = 1.0013580322265625E-5 : f64, normalize_variance = true} : tensor<1x4x512x1xf16> -> tensor<1x4x512x1xf16> loc(#loc51)
    %4 = IE.Swish(%3) : tensor<1x4x512x1xf16> -> tensor<1x4x512x1xf16> loc(#loc54)
    %5 = IE.MVN(%4) {across_channels = false, eps = 1.0013580322265625E-5 : f64, normalize_variance = true} : tensor<1x4x512x1xf16> -> tensor<1x4x512x1xf16> loc(#loc52)
    %6 = IE.MVN(%5) {across_channels = false, eps = 1.0013580322265625E-5 : f64, normalize_variance = true} : tensor<1x4x512x1xf16> -> tensor<1x4x512x1xf16> loc(#loc53)
    %7 = IE.Tanh(%6) : tensor<1x4x512x1xf16> -> tensor<1x4x512x1xf16> loc(#loc55)
    %cst_1 = const.Declare tensor<3xsi64> = dense<[1, 4, 512]> : tensor<3xsi64> loc(#loc6)
    %8 = IE.Reshape(%7, %cst_1) : tensor<1x4x512x1xf16>, tensor<3xsi64> -> tensor<1x4x512xf16> loc(#loc7)
    return %8 : tensor<1x4x512xf16> loc(#loc8)
  } loc(#loc0)
} loc(#loc0)
#loc1 = loc("const0?")
#loc3 = loc("Constant_1422?")
#loc4 = loc("Reshape_1423?")
#loc5 = loc("MVN_0?")
#loc51 = loc("MVN_1?")
#loc52 = loc("MVN_2?")
#loc53 = loc("MVN_3?")
#loc54 = loc("Swish_0?")
#loc55 = loc("Tanh_0?")
#loc6 = loc("Constant_1430?")
#loc7 = loc("Div_0?")
#loc8 = loc("output")
