include "memoryManagement.fbs";
namespace MVCNN;

table Tensor{
  dimX: uint;
  dimY: uint;
  dimZ: uint;
  strideX: uint;
  strideY: uint;
  strideZ: uint;
  offset: uint;
  location: uint;
  dataType: uint;
  order: uint;
}

table Conv2D{
  radixX: uint;
  radixY: uint;
  strideX: uint;
  strideY: uint;
  padX: uint;
  padY: uint;
  padStyle: uint;
  dilation: uint;
  input : TensorReference;
  output : TensorReference;
  weight : TensorReference;
  bias : TensorReference;
}

table Pooling{
  radixX: uint;
  radixY: uint;
  strideX: uint;
  strideY: uint;
  padX: uint;
  padY: uint;
  padStyle: uint;
  dilation: uint;
  input : TensorReference;
  output : TensorReference;
}

table ReLU{
  opX: uint;
  input : TensorReference;
  output : TensorReference;
  strideX: uint;
  strideY: uint;
}

table Passthrough{
  input : TensorReference;
  output : TensorReference;
}

table Custom{
  data: [byte];
  length: [long];
  id: short;
}

union SoftwareLayer {
  Conv2D,
  Pooling,
  ReLU,
  Passthrough,
  Custom
}

table MvTensorTask {
   layer: SoftwareLayer;
}

// ------- NN SOFTWARE ------- //

table PPEConfigure{
  vals: [byte]; // 16 of these
}
table PPEAssist {
  op: byte;
}

union NNHelper{
  PPEConfigure,  // Reload PPE Config
  PPEAssist,    // Backup for PPE Layer
  // SoftwareLayer   // NN Software Layers
}

table NNTensorTask{
  subtask: NNHelper;
}